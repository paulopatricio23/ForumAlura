REST: Representational State Transfer
Protocolo HTTP
Identificação de recursos (URI)
Manipulação recursos (verbos HTTP)
Representação de recursos (Media Types)

------------------------------------------------------

Gerar um projeto Spring do zero

start.spring.io

-------------------------------------------------------

Ativar o auto reload no IntelliJ


* Ctrl+Alt+s -> Build, Execution, Deployment -> Compiler -> Marcar a opção "Build project automatically"
* Ctrl+Alt+s -> Advanced Settings -> Marcar a opção "Allow auto-make..."

-------------------------------------------------------

HTTP STATUS CODES

2xx - indica que a requisição foi processada com sucesso
3xx - indica ao cliente uma ação a ser tomada para que a requisição possa ser concluída
4xx - indica erros na requisição causados pelo cliente
5xx - indica que a requisição não foi concluída devido a erros ocorridos no servidor

--------------------------------------------------------

CACHE

O cache deve ser colocado em situações onde as informações a serem consultadas raramente mudam no banco.
Caso seja utilizado em situações que mudam frequentemente, teria que ficar anulando o cache e isso poderia prejudicar a performance

No ambiente de desenvolvimente, apenas o stater-cache é suficiente. Porém em Produção, seria importante utilizar mais outra ferramente para armazenar o cache, tal qual como Redis.

---------------------------------------------------------

BANCO H2

É possível habilitar o console gráfico do banco em memória H2. Basta adicionar 'h2.console.enable=true'
Para acessá-lo, basta abrir o navegador e digitar: http://localhost:8080/console-h2 e utlizar as credenciais de acesso setadas no properties

---------------------------------------------------------

JWT

Json Web Token.

É uma String separada em 3 por pontos ".":

- A primeira parte representa o cabeçalho que é composto pelas seguintes informações:
    -  O algoritmo de criptografia.
    - O tipo do token.

- A segunda parte representa o payload, onde estão as informações do usuário e é composto pelas seguintes informações:
    - sub: geralmente o id do usuário.
    - name: nome do usuário
    - iat (issued at): timestamp de quando o token foi criado

- A terceira parte é a "verify signature" que nada mais é que a assinatura do token que consiste em:
    - Uma string baseada no Header, no payload e na secret gerada durante a criação do token.

-------------------------------------------------------------------

DOCKERFILE

FROM adoptopenjdk/openjdk11 -- A imagem do container normalmente encontrada no site: docker hub
EXPOSE 8080 -- A porta em que a aplicação será exposta para fora do container
ADD /target/forum-0.0.1-SNAPSHOT.jar forum.jar -- Adiciona o caminho do jar da aplicação
ENTRYPOINT ["java", "-jar", "forum.jar"] -- comando para iniciar a aplicação

-------------------------------------------------------------------

COMANDO PARA CONSTRUIR A IMAGEM DOCKER

docker build -t forum -f Dockerfile .

-t: adicionar uma tag para a imagem
-f: especificar onde estão as informações para montar a imagem

-------------------------------------------------------------------

COMANDO PARA EXECUTAR A APLICAÇÃO

docker run -p 3080:8080 forum

-p: 3080 -> porta do container
    8080 -> porta de exposição da aplicação

Então, a partir de agora os endpoints deverão ser chamados pela porta 3080

-------------------------------------------------------------------

HEROKU

Plataforma de cloud para deploy de aplicação

-------------------------------------------------------------------

COMANDO PARA CONECTAR O HEROKU AO TERMINAL

heroku login

-------------------------------------------------------------------

COMANDO PARA CRIAR UM PROJETO NO HEROKU

heroku create

-------------------------------------------------------------------

COMANDO PARA CONECTAR O PROJETO AO HEROKU

Executar no diretório raíz do projeto:
heroku git:remote -a pure-caverns-56100

-a: nome do projeto criado no comando heroku create

-------------------------------------------------------------------

COMANDO PARA CONECTAR AO REGISTRY DO HEROKU

heroku container:login

-------------------------------------------------------------------

COMANDO PARA CRIAR A IMAGEM NO REGISTRY DO HEROKU

heroku container:push web

web: stack default do heroku

-------------------------------------------------------------------

COMANDO PARA CRIAR UMA RELEASE NO HEROKU

heroku container:release web

-------------------------------------------------------------------

LOGS NO HEROKU

https://dashboard.heroku.com/apps/pure-caverns-56100/logs

-------------------------------------------------------------------

ADICIONANDO FLAGS DA JVM NO ENTRYPOINT DO DOCKERFILE

Para a aplicação executar corretamente em prod algumas flags deverão ser adicionadas:

XX:+UseContainerSupport: avisar à JVM que a aplicação está rodando em um container, melhorando a performance
Xmx Xss: máximo e mínimo de memória que a aplicação vai utilizar
CICompilerCount: define a quantidade de compiladores para performance da aplicação
-Dserver.port: indicar a porta através de uma variável de ambiente, pois a porta nem sempre será a mesma em ambiente de prod
-Dspring.profile.active: define o ambiente de execução

após estas alterações executar:

mvn clean package
heroku container:push web
